<h1>The Storefront service</h1>

<p>
  Storefront's main service acts as a replacement for Ember Data's <code>store</code>. It's built directly on top of Ember Data, but is more intelligent about caching. Another way to say this is that Storefront's <code>find</code> methods are query-aware.
</p>

<h2>Avoiding unexpected re-renders</h2>

{{!-- <p>Storefront's version of <code>findAll</code> is similar to Ember Data's with one important exception: it caches results based on the complete set of options you pass to it. Ember Data, on the other hand, resolves calls to <code>findAll</code> by returning everything in its local store.</p> --}}

<p>Ember Data's <code>store.findAll</code> method is used to fetch a collection from your backend. Typically this method will return a blocking promise while the network request is in progress; however, if Ember Data has any local records in its store when <code>findAll</code> is called, it will resolve the promise immediately and return everything in its local store, and then trigger a network request in the background. This can lead to unexpected rendering behavior.</p>

<p>In the following example, compare how the app behaves when you visit the routes in a different order:</p>
<ul>
  <li>First, visit <code>/posts</code>, then visit <code>/posts/1</code>.</li>
  <li>When you're done, reset the app.</li>
  <li>This time, visit <code>/posts/1</code> first and <code>/posts</code> second.</li>
</ul>

{{docs/guides/storefront/demo-1}}

<p>If you followed the steps above, what you'll notice is that under the second scenario, the <code>/posts</code> route was actually rendered in two states. First, it showed <code>post:1</code> in the list, and then after about a second the app re-rendered and the other two posts appeared.</p>

<p>This is because the <code>/posts/1</code> route loaded the <code>post:1</code> record into Ember Data's store. By the time you visited the <code>/posts</code> index route, the promise from the store's <code>findAll</code> method resolved immediately with that <code>post:1</code> record, and then triggered a background reload of the entire <code>posts</code> collection. (Click the {{fa-icon 'angle-down'}} above to expand the demo for more details about what's happening as you navigate through the app.)</p>

<p>Ember Data's <code>findAll</code> method accepts a <code>reload</code> option that we can use to force the promise to block, but then we'd lose the benefits of caching. (Note how after visiting <code>/posts</code> for the first time, it's fast on all subsequent visits.)</p>

<p>Storefront's modified version of <code>findAll</code> was designed to avoid re-rendering problems like this.</p>

{{!-- <h2>Loading a model</h2> --}}
