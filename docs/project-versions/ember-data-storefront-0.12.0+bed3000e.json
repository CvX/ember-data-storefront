{"data":{"type":"project-version","id":"ember-data-storefront-0.12.0+bed3000e","relationships":{"classes":{"data":[{"id":"AssertMustPreload-0.12.0+bed3000e","type":"class"},{"id":"LoadableModel-0.12.0+bed3000e","type":"class"},{"id":"LoadableStore-0.12.0+bed3000e","type":"class"}]}},"attributes":{"version":"0.12.0+bed3000e"}},"included":[{"id":"AssertMustPreload-0.12.0+bed3000e","type":"class","attributes":{"name":"AssertMustPreload","shortname":"AssertMustPreload","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/components/assert-must-preload/component.js","line":3,"description":"<div class=\"docs-md\"><p><em>This component relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p><em>{{assert-must-preload}} only works on models that have included the Loadable mixin.</em></p>\n<p>Use this when authoring a component that requires a model to be passed in with\ncertain relationships already loaded.</p>\n<p>For example, if you wanted to ensure the following template was never rendered without <code>post.comments</code> already loaded, you could add the call to <code>{{assert-must-preload}}</code>:</p>\n<pre><code class=\"lang-hbs\"><span class=\"xml\"></span><span class=\"hljs-template-variable\">{{assert-must-preload post 'comments.author'}}</span><span class=\"xml\">\n\n</span><span class=\"hljs-comment\">{{!-- the rest of your template --}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{#<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span> post.comments as |comment|}}</span><span class=\"xml\">\n  This comment was written by </span><span class=\"hljs-template-variable\">{{comment.author.name}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{/<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span>}}</span><span class=\"xml\"></span>\n</code></pre>\n<p>If any developer ever tries to render this template without first loading the post&#39;s <code>comments.author</code>, they&#39;ll get a dev-time error.</p>\n</div>","access":"public","tagname":"","methods":[],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.12.0+bed3000e"}}}},{"id":"LoadableModel-0.12.0+bed3000e","type":"class","attributes":{"name":"LoadableModel","shortname":"LoadableModel","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-model.js","line":3,"description":"<div class=\"docs-md\"><p><em>This mixin relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>This mixin adds new data-loading methods to your Ember Data models.</p>\n<p>To use it, extend a model and mix it in:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// app/models/post.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> LoadableModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable-model'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> DS.Store.extend(LoadableModel);\n</code></pre>\n<p>Once you understand how <code>LoadableModel</code> works We suggest adding it to every model in your app. You can do this by reopening <code>DS.Model</code> in <code>app.js.</code> and mixing it in:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// app/app.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> LoadableModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable-model'</span>;\n\nDS.Model.reopen(Loadable);\n</code></pre>\n</div>","access":"public","tagname":"","methods":[{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-model.js","line":35,"description":"<div class=\"docs-md\"><p><code>load</code> gives you an explicit way to asynchronously load related data.</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments'</span>);\n</code></pre>\n<p>The above uses Storefront&#39;s <code>loadRecord</code> method to query your backend for the post along with its comments.</p>\n<p>You can also use JSON:API&#39;s dot notation to load additional related relationships.</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments.author'</span>);\n</code></pre>\n<p>Every call to <code>load()</code> will return a promise.</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'loaded comments!'</span>));\n</code></pre>\n<p>If a relationship has never been loaded, the promise will block until the data is loaded. However, if a relationship has already been loaded (even from calls to <code>loadRecord</code> elsewhere in your application), the promise will resolve synchronously with the data from Storefront&#39;s cache. This means you don&#39;t have to worry about overcalling <code>load()</code>.</p>\n<p>This feature works best when used on relationships that are defined with <code>{ async: false }</code> because it allows <code>load()</code> to load the data, and <code>get()</code> to access the data that has already been loaded.</p>\n</div>","itemtype":"method","name":"load","params":[{"name":"includesString","description":"a JSON:API includes string representing the relationships to check","type":"String"}],"return":{"description":"a promise resolving with the record","type":"Promise"},"access":"public","tagname":"","class":"LoadableModel"},{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-model.js","line":73,"description":"<div class=\"docs-md\"><p>This method returns true if the provided includes string has been loaded and false if not.</p>\n</div>","itemtype":"method","name":"hasLoaded","params":[{"name":"includesString","description":"a JSON:API includes string representing the relationships to check","type":"String"}],"return":{"description":"true if the includes has been loaded, false if not","type":"Boolean"},"access":"public","tagname":"","class":"LoadableModel"}],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.12.0+bed3000e"}}}},{"id":"LoadableStore-0.12.0+bed3000e","type":"class","attributes":{"name":"LoadableStore","shortname":"LoadableStore","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-store.js","line":5,"description":"<div class=\"docs-md\"><p>This mixin that adds new data-loading methods to Ember Data&#39;s store.</p>\n<p>To use it, extend Ember Data&#39;s store in your app and mix it in:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// app/services/store.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> LoadableStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable-store'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> DS.Store.extend(LoadableStore);\n</code></pre>\n</div>","access":"public","tagname":"","methods":[{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-store.js","line":29,"description":"<div class=\"docs-md\"><p><code>loadAll</code> can be used in place of <code>store.findAll</code> to fetch a collection of records for the given type and options.</p>\n<pre><code class=\"lang-diff\">  this.get('store')\n<span class=\"hljs-deletion\">-   .findAll('post', { filter: { popular: true } })</span>\n<span class=\"hljs-addition\">+   .loadAll('post', { filter: { popular: true } })</span>\n    .then(models =&gt; models);\n</code></pre>\n<p><code>loadAll</code> caches based on the query you provide, so each of the following examples would return a blocking promise the first time they are called, and synchronously resolve from the cache thereafter.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// filters</span>\nstore.loadAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n\n<span class=\"hljs-comment\">// pagination</span>\nstore.loadAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">page</span>: { <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span> }});\n\n<span class=\"hljs-comment\">// includes</span>\nstore.loadAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n</code></pre>\n<p>Similar to <code>store.findAll</code>, you can force a query to reload using <code>reload: true</code>:</p>\n<pre><code><span class=\"hljs-comment\">// force an already loaded set to reload (blocking promise)</span>\nstore.loadAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-string\">reload:</span> <span class=\"hljs-literal\">true</span> });\n</code></pre><p>In most cases, <code>loadAll</code> should be a drop-in replacement for <code>findAll</code> that eliminates bugs and improves your app&#39;s caching.</p>\n</div>","itemtype":"method","name":"loadAll","params":[{"name":"type","description":"type of model to load","type":"String"},{"name":"options","description":"(optional) a hash of options","type":"Object"}],"return":{"description":"a promise resolving with the record array","type":"Promise"},"access":"public","tagname":"","class":"LoadableStore"},{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-store.js","line":83,"description":"<div class=\"docs-md\"><p><code>loadRecord</code> can be used in place of <code>store.findRecord</code> to fetch a single record for the given type, id and options.</p>\n<pre><code class=\"lang-diff\">  this.get('store')\n<span class=\"hljs-deletion\">-   .findRecord('post', 1, { include: 'comments' })</span>\n<span class=\"hljs-addition\">+   .loadRecord('post', 1, { include: 'comments' })</span>\n    .then(post =&gt; post);\n</code></pre>\n<p><code>loadRecord</code> caches based on the query you provide, so each of the following examples would return a blocking promise the first time they are called, and synchronously resolve from the cache thereafter.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// simple fetch</span>\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).loadRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-comment\">// includes</span>\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).loadRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n</code></pre>\n<p>This solves many common bugs where <code>findRecord</code> would return immediately, even if important <code>includes</code> had never been loaded.</p>\n<p>Similar to <code>store.findRecord</code>, you can force a query to reload using <code>reload: true</code>:</p>\n<pre><code><span class=\"hljs-comment\">// force an already loaded set to reload (blocking promise)</span>\nstore.loadRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-string\">reload:</span> <span class=\"hljs-literal\">true</span> });\n</code></pre><p>In most cases, <code>loadAll</code> should be a drop-in replacement for <code>findAll</code> that eliminates bugs and improves your app&#39;s caching.</p>\n</div>","itemtype":"method","name":"loadRecord","params":[{"name":"type","description":"type of model to load","type":"String"},{"name":"id","description":"id of model to load","type":"Number"},{"name":"options","description":"(optional) a hash of options","type":"Object"}],"return":{"description":"a promise resolving with the record array","type":"Promise"},"access":"public","tagname":"","class":"LoadableStore"},{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-6S167VGS.tmp/mixins/loadable-store.js","line":137,"description":"<div class=\"docs-md\"><p><em>This method relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>Lets you check whether you&#39;ve ever loaded related data for a model.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).hasLoadedIncludesForRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'comments.author'</span>);\n</code></pre>\n</div>","itemtype":"method","name":"hasLoadedIncludesForRecord","params":[{"name":"type","description":"type of model to check","type":"String"},{"name":"id","description":"id of model to check","type":"Number"},{"name":"includesString","description":"a JSON:API includes string representing the relationships to check","type":"String"}],"return":{"description":"whether the includesString has been loaded","type":"Boolean"},"access":"public","tagname":"","class":"LoadableStore"}],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.12.0+bed3000e"}}}}]}
