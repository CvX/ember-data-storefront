{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+619ce233","relationships":{"classes":{"data":[{"id":"AssertMustPreload-0.11.1+619ce233","type":"class"},{"id":"Loadable-0.11.1+619ce233","type":"class"},{"id":"Storefront-0.11.1+619ce233","type":"class"}]}},"attributes":{"version":"0.11.1+619ce233"}},"included":[{"id":"AssertMustPreload-0.11.1+619ce233","type":"class","attributes":{"name":"AssertMustPreload","shortname":"AssertMustPreload","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/components/assert-must-preload/component.js","line":3,"description":"<div class=\"docs-md\"><p><em>This component relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>Use this when authoring a component that requires a model to be passed in with\ncertain relationships already loaded.</p>\n<p>For example, if you wanted to ensure the following template was never rendered without <code>post.comments</code> already loaded, you could add the call to <code>{{assert-must-preload}}</code>:</p>\n<pre><code class=\"lang-hbs\"><span class=\"xml\"></span><span class=\"hljs-template-variable\">{{assert-must-preload post 'comments.author'}}</span><span class=\"xml\">\n\n</span><span class=\"hljs-comment\">{{!-- the rest of your template --}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{#<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span> post.comments as |comment|}}</span><span class=\"xml\">\n  This comment was written by </span><span class=\"hljs-template-variable\">{{comment.author.name}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{/<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span>}}</span><span class=\"xml\"></span>\n</code></pre>\n<p>If any developer ever tries to render this template without first loading the post&#39;s <code>comments.author</code>, they&#39;ll get a dev-time error.</p>\n</div>","access":"public","tagname":"","methods":[],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+619ce233"}}}},{"id":"Loadable-0.11.1+619ce233","type":"class","attributes":{"name":"Loadable","shortname":"Loadable","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/mixins/loadable.js","line":3,"description":"<div class=\"docs-md\"><p><em>This mixin relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>This mixin adds a <code>#load</code> method to your Ember Data models.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// models/post.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> Loadable <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> DS.Model.extend(Loadable, {\n  <span class=\"hljs-attr\">comments</span>: DS.hasMany()\n});\n</code></pre>\n<p><code>#load</code> gives you an explicit way to asynchronously load related data:</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments'</span>);\n</code></pre>\n<p>The above uses Storefront&#39;s <code>findRecord</code> method to query your backend for the post along with its comments.</p>\n<p>You can also use JSON:API&#39;s dot notation to load additional related relationships.</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments.author'</span>);\n</code></pre>\n<p>Every call to <code>load()</code> will return a promise.</p>\n<pre><code class=\"lang-js\">post.load(<span class=\"hljs-string\">'comments'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'loaded comments!'</span>));\n</code></pre>\n<p>If a relationship has never been loaded, the promise will block until the data is loaded. However, if a relationship has already been loaded (even from calls to <code>findRecord</code> elsewhere in your application), the promise will resolve synchronously with the data from Storefront&#39;s cache. This means you don&#39;t have to worry about overcalling <code>load()</code>.</p>\n<p>This feature works best when used on relationships that are defined with <code>{ async: false }</code> because it allows <code>load()</code> to load the data, and <code>get()</code> to access the data that has already been loaded.</p>\n<p>We suggest adding the <code>#load</code> API to every model in your app. To do so, reopen <code>DS.Model</code> in <code>app.js.</code> and mix in <code>Loadable</code>:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// app/app.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> Loadable <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable'</span>;\n\nDS.Model.reopen(Loadable);\n</code></pre>\n</div>","access":"public","tagname":"","methods":[],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+619ce233"}}}},{"id":"Storefront-0.11.1+619ce233","type":"class","attributes":{"name":"Storefront","shortname":"Storefront","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/services/storefront.js","line":7,"description":"<div class=\"docs-md\"><p>Storefront&#39;s main service builds directly upon Ember Data&#39;s <code>Store</code>. Under the hood, this service delegates to Ember Data, so you should feel free to fall back to Ember Data&#39;s store at any time.</p>\n<p>By default, the <code>storefront</code> service is injected into all routes and controllers. If you&#39;d like to use the service in another Ember object, you can inject it as you would any other service:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.Component.extend({\n  <span class=\"hljs-attr\">storefront</span>: Ember.service.inject(),\n\n  didInsertElement() {\n    <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>).findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n  }\n});\n</code></pre>\n</div>","access":"public","tagname":"","methods":[{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/services/storefront.js","line":34,"description":"<div class=\"docs-md\"><p>Finds the records for the given type and options and returns a promise.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>)\n  .findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> } })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">models</span> =&gt;</span> models);\n</code></pre>\n<p>Here are some more examples:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// filters</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n\n<span class=\"hljs-comment\">// pagination</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">page</span>: { <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span> }});\n\n<span class=\"hljs-comment\">// includes</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n\n<span class=\"hljs-comment\">// force an already loaded set to reload (blocking promise)</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">reload</span>: <span class=\"hljs-literal\">true</span> });\n</code></pre>\n</div>","itemtype":"method","name":"findAll","params":[{"name":"type","description":"type of model to load","type":"String"},{"name":"options","description":"(optional) a hash of options","type":"Object"}],"return":{"description":"a promise resolving with the record array","type":"Promise"},"access":"public","tagname":"","class":"Storefront"},{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/services/storefront.js","line":90,"description":"<div class=\"docs-md\"><p>Finds a single record for the given type-id pair and options, and returns a promise.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>)\n  .findRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> post);\n</code></pre>\n<p><code>#findRecord</code> is query-aware, meaning the following two calls to <code>findRecord</code> are different:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>).findRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>);\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>).findRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n</code></pre>\n<p>If either query has never been run before, it will return a blocking promise. Otherwise,\nit will synchronously return the previous value from Storefront&#39;s cache.</p>\n</div>","itemtype":"method","name":"findRecord","params":[{"name":"type","description":"type of model to load","type":"String"},{"name":"id","description":"id of model to load","type":"Number"},{"name":"options","description":"(optional) a hash of options","type":"Object"}],"return":{"description":"a promise resolving with the record array","type":"Promise"},"access":"public","tagname":"","class":"Storefront"},{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-0zgviczv.tmp/services/storefront.js","line":141,"description":"<div class=\"docs-md\"><p><em>This method relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>This method allows you to check whether Storefront has ever loaded related data for a model.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>)\n  .hasLoadedIncludesForRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'comments.author'</span>);\n</code></pre>\n</div>","itemtype":"method","name":"hasLoadedIncludesForRecord","params":[{"name":"type","description":"type of model to check","type":"String"},{"name":"id","description":"id of model to check","type":"Number"},{"name":"includesString","description":"a JSON:API includes string representing the relationships to check","type":"String"}],"return":{"description":"whether the includesString has been loaded","type":"Boolean"},"access":"public","tagname":"","class":"Storefront"}],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+619ce233"}}}}]}
