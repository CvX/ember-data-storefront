{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+e47ec346","relationships":{"classes":{"data":[{"id":"Storefront-0.11.1+e47ec346","type":"class"}]}},"attributes":{"version":"0.11.1+e47ec346"}},"included":[{"id":"Storefront-0.11.1+e47ec346","type":"class","attributes":{"name":"Storefront","shortname":"Storefront","classitems":[],"plugins":[],"extensions":[],"plugin_for":[],"extension_for":[],"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-tRA8wEqg.tmp/services/storefront.js","line":7,"description":"<div class=\"docs-md\"><p>Storefront&#39;s main service builds directly upon Ember Data&#39;s <code>Store</code>. Under the hood, this service delegates to Ember Data, so you should feel free to fall back to Ember Data&#39;s store at any time.</p>\n<p>By default, the <code>storefront</code> service is injected into all routes and controllers. If you&#39;d like to use the service in another Ember object, you can inject it as you would any other service:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Ember.Component.extend({\n  <span class=\"hljs-attr\">storefront</span>: Ember.service.inject(),\n\n  didInsertElement() {\n    <span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>).findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n  }\n});\n</code></pre>\n</div>","access":"public","tagname":"","methods":[{"file":"/home/travis/build/embermap/ember-data-storefront/tmp/docs_generator-input_base_path-tRA8wEqg.tmp/services/storefront.js","line":34,"description":"<div class=\"docs-md\"><p>Finds the records for the given type and options and returns a promise.</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'storefront'</span>)\n  .findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> } })\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">models</span> =&gt;</span> models);\n</code></pre>\n<p>Here are some more examples:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-comment\">// filters</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n\n<span class=\"hljs-comment\">// pagination</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">page</span>: { <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span> }});\n\n<span class=\"hljs-comment\">// includes</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n\n<span class=\"hljs-comment\">// force an already loaded set to reload (blocking promise)</span>\nstorefront.findAll(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">reload</span>: <span class=\"hljs-literal\">true</span> });\n</code></pre>\n</div>","itemtype":"method","name":"findAll","params":[{"name":"type","description":"type of model to load","type":"String"},{"name":"options","description":"(optional) a hash of options","type":"Object"}],"return":{"description":"a promise resolving with the record array","type":"Promise"},"access":"public","tagname":"","class":"Storefront"}],"events":[],"properties":[]},"relationships":{"parent-class":{"data":null},"descendants":{"data":[]},"module":{"data":null},"project-version":{"data":{"type":"project-version","id":"ember-data-storefront-0.11.1+e47ec346"}}}}]}
