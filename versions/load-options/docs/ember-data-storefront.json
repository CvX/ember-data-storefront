{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-data-storefront","attributes":{"name":"ember-data-storefront","version":"0.15.0","navigationIndex":[{"type":"components","items":[{"id":"ember-data-storefront/components/assert-must-preload/component","path":"components/assert-must-preload","name":"{{assert-must-preload}}"}]},{"type":"mixins","items":[{"id":"ember-data-storefront/mixins/fastboot-adapter","path":"mixins/fastboot-adapter","name":"FastbootAdapter"},{"id":"ember-data-storefront/mixins/loadable-model","path":"mixins/loadable-model","name":"LoadableModel"},{"id":"ember-data-storefront/mixins/loadable-store","path":"mixins/loadable-store","name":"LoadableStore"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-data-storefront/components/assert-must-preload/component"},{"type":"module","id":"ember-data-storefront/mixins/fastboot-adapter"},{"type":"module","id":"ember-data-storefront/mixins/loadable-model"},{"type":"module","id":"ember-data-storefront/mixins/loadable-store"}]}}},"included":[{"type":"component","id":"ember-data-storefront/components/assert-must-preload/component~AssertMustPreload","attributes":{"name":"AssertMustPreload","file":"ember-data-storefront/components/assert-must-preload/component","description":"<div class=\"docs-md\"><p><em>This component relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p><em>{{assert-must-preload}} only works on models that have included the LoadableModel mixin.</em></p>\n<p>Use this when authoring a component that requires a model to be passed in with\ncertain relationships already loaded.</p>\n<p>For example, if you wanted to ensure the following template was never rendered without <code>post.comments</code> already loaded, you could add the call to <code>{{assert-must-preload}}</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedhbs\"><span class=\"xml\"></span><span class=\"hljs-template-variable\">{{assert-must-preload post 'comments.author'}}</span><span class=\"xml\">\n\n</span><span class=\"hljs-comment\">{{!-- the rest of your template --}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{#<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span> post.comments as |comment|}}</span><span class=\"xml\">\n  This comment was written by </span><span class=\"hljs-template-variable\">{{comment.author.name}}</span><span class=\"xml\">\n</span><span class=\"hljs-template-tag\">{{/<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">each</span></span>}}</span><span class=\"xml\"></span></code></pre>\n<p>If any developer ever tries to render this template without first loading the post&#39;s <code>comments.author</code>, they&#39;ll get a dev-time error.</p></div>","lineNumber":4,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[],"methods":[],"accessors":[],"parentClassId":null,"arguments":[],"yields":[]},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-storefront/components/assert-must-preload/component","attributes":{"file":"ember-data-storefront/components/assert-must-preload/component","functions":[],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[{"type":"component","id":"ember-data-storefront/components/assert-must-preload/component~AssertMustPreload"}]}}},{"type":"class","id":"ember-data-storefront/mixins/fastboot-adapter~FastbootAdapter","attributes":{"name":"FastbootAdapter","file":"ember-data-storefront/mixins/fastboot-adapter","description":"<div class=\"docs-md\"><p>This mixin adds fastboot support to your data adapter. It provides no\npublic API, it only needs to be mixed into your adapter.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/adpaters/application.js</span>\n\n<span class=\"hljs-keyword\">import</span> JSONAPIAdapter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data/adapters/json-api'</span>;\n<span class=\"hljs-keyword\">import</span> FastbootAdapter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/fastboot-adapter'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> JSONAPIAdapter.extend(\n  FastbootAdapter, {\n\n  <span class=\"hljs-comment\">// ...</span>\n\n});</code></pre></div>","lineNumber":6,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[],"methods":[],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-storefront/mixins/fastboot-adapter","attributes":{"file":"ember-data-storefront/mixins/fastboot-adapter","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-storefront/mixins/fastboot-adapter~FastbootAdapter"}]},"components":{"data":[]}}},{"type":"class","id":"ember-data-storefront/mixins/loadable-model~LoadableModel","attributes":{"name":"LoadableModel","file":"ember-data-storefront/mixins/loadable-model","description":"<div class=\"docs-md\"><p>This mixin adds new data-loading methods to your Ember Data models.</p>\n<p>To use it, extend a model and mix it in:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/models/post.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> LoadableModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable-model'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> DS.Model.extend(LoadableModel);</code></pre>\n<p>Once you understand how <code>LoadableModel</code> works We suggest adding it to every model in your app. You can do this by reopening <code>DS.Model</code> in <code>app.js.</code> and mixing it in:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// app/app.js</span>\n<span class=\"hljs-keyword\">import</span> DS <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data'</span>;\n<span class=\"hljs-keyword\">import</span> LoadableModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-storefront/mixins/loadable-model'</span>;\n\nDS.Model.reopen(LoadableModel);</code></pre></div>","lineNumber":9,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[],"methods":[{"name":"sideload","file":"ember-data-storefront/mixins/loadable-model","description":"<div class=\"docs-md\"><p><code>sideload</code> gives you an explicit way to asynchronously sideload related data.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.sideload(<span class=\"hljs-string\">'comments'</span>);</code></pre>\n<p>The above uses Storefront&#39;s <code>loadRecord</code> method to query your backend for the post along with its comments.</p>\n<p>You can also use JSON:API&#39;s dot notation to load additional related relationships.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.sideload(<span class=\"hljs-string\">'comments.author'</span>);</code></pre>\n<p>Every call to <code>sideload()</code> will return a promise.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.sideload(<span class=\"hljs-string\">'comments'</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">post</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'loaded comments!'</span>));</code></pre>\n<p>If a relationship has never been loaded, the promise will block until the data is loaded. However, if a relationship has already been loaded (even from calls to <code>loadRecord</code> elsewhere in your application), the promise will resolve synchronously with the data from Storefront&#39;s cache. This means you don&#39;t have to worry about overcalling <code>sideload()</code>.</p>\n<p>When relationship data has already been loaded, <code>sideload</code> will use a background refresh to update the relationship. To prevent sideload from making network requests use the <code>{ backgroundReload: false }</code> option.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.sideload(<span class=\"hljs-string\">'comments'</span>, { <span class=\"hljs-attr\">backgroundReload</span>: <span class=\"hljs-literal\">false</span> });</code></pre>\n<p>If you would like calls to <code>sideload</code> to always return a blocking promise, use the <code>{ reload: true }</code> option.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.sideload(<span class=\"hljs-string\">'comments'</span>, { <span class=\"hljs-attr\">reload</span>: <span class=\"hljs-literal\">true</span> })</code></pre>\n<p>This feature works best when used on relationships that are defined with <code>{ async: false }</code> because it allows <code>load()</code> to load the data, and <code>get()</code> to access the data that has already been loaded.</p>\n<p>This method relies on JSON:API and assumes that your server supports JSON:API includes.</p></div>","lineNumber":52,"access":"public","tags":[],"returns":{"type":"Promise","description":"a promise resolving with the record","properties":[]},"params":[{"name":"includesString","type":"string","description":"a JSON:API includes string representing the relationships to check"},{"name":"options","type":"object","description":"(optional) a hash of options"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"load","file":"ember-data-storefront/mixins/loadable-model","description":"<div class=\"docs-md\"><p><code>load</code> gives you an explicit way to asynchronously load related data.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.load(<span class=\"hljs-string\">'comments'</span>);</code></pre>\n<p>The above uses Ember data&#39;s references API to load a post&#39;s comments from your backend.</p>\n<p>Every call to <code>load()</code> will return a promise.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\">post.load(<span class=\"hljs-string\">'comments'</span>).then(<span class=\"hljs-function\">(<span class=\"hljs-params\">comments</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'loaded comments as'</span>, comments));</code></pre>\n<p>If a relationship has never been loaded, the promise will block until the data is loaded. However, if a relationship has already been loaded, the promise will resolve synchronously with the data from the cache. This means you don&#39;t have to worry about overcalling <code>load()</code>.</p></div>","lineNumber":116,"access":"public","tags":[],"returns":{"type":"Promise","description":"a promise resolving with the related data","properties":[]},"params":[{"name":"name","type":"string","description":"the name of the relationship to load"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"_getRelationshipInfo","file":"ember-data-storefront/mixins/loadable-model","lineNumber":167,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"_getReference","file":"ember-data-storefront/mixins/loadable-model","lineNumber":182,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"_getLoadMethod","file":"ember-data-storefront/mixins/loadable-model","description":"<div class=\"docs-md\"><p>Given a relationship name this method will return the best way to load\nthat relationship.</p></div>","lineNumber":192,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"_hasLoadedReference","file":"ember-data-storefront/mixins/loadable-model","lineNumber":215,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"hasLoaded","file":"ember-data-storefront/mixins/loadable-model","description":"<div class=\"docs-md\"><p>This method returns true if the provided includes string has been loaded and false if not.</p></div>","lineNumber":223,"access":"public","tags":[],"returns":{"type":"boolean","description":"true if the includes has been loaded, false if not","properties":[]},"params":[{"name":"includesString","type":"string","description":"a JSON:API includes string representing the relationships to check"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-storefront/mixins/loadable-model","attributes":{"file":"ember-data-storefront/mixins/loadable-model","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-storefront/mixins/loadable-model~LoadableModel"}]},"components":{"data":[]}}},{"type":"class","id":"ember-data-storefront/mixins/loadable-store~LoadableStore","attributes":{"name":"LoadableStore","file":"ember-data-storefront/mixins/loadable-store","description":"<div class=\"docs-md\"><p>This mixin that adds new data-loading methods to Ember Data&#39;s store.</p>\n<p>It is automatically mixed into your application&#39;s store when you install the addon.</p></div>","lineNumber":6,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[],"methods":[{"name":"loadRecords","file":"ember-data-storefront/mixins/loadable-store","description":"<div class=\"docs-md\"><p><code>loadRecords</code> can be used in place of <code>store.query</code> to fetch a collection of records for the given type and options.</p>\n<pre class=\"docs-md__code\"><code class=\"undefineddiff\">  this.get('store')\n<span class=\"hljs-deletion\">-   .query('post', { filter: { popular: true } })</span>\n<span class=\"hljs-addition\">+   .loadRecords('post', { filter: { popular: true } })</span>\n    .then(models =&gt; models);</code></pre>\n<p><code>loadRecords</code> caches based on the query you provide, so each of the following examples would return a blocking promise the first time they are called, and instantly resolve from the cache thereafter.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// filters</span>\nstore.loadRecords(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">filter</span>: { <span class=\"hljs-attr\">popular</span>: <span class=\"hljs-literal\">true</span> }});\n\n<span class=\"hljs-comment\">// pagination</span>\nstore.loadRecords(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">page</span>: { <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">offset</span>: <span class=\"hljs-number\">0</span> }});\n\n<span class=\"hljs-comment\">// includes</span>\nstore.loadRecords(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });\n\n<span class=\"hljs-comment\">// force an already loaded set to reload (blocking promise)</span>\nstore.loadRecords(<span class=\"hljs-string\">'post'</span>, { <span class=\"hljs-attr\">reload</span>: <span class=\"hljs-literal\">true</span> });</code></pre>\n<p>In most cases, <code>loadRecords</code> should be a drop-in replacement for <code>query</code> that eliminates bugs and improves your app&#39;s caching.</p></div>","lineNumber":22,"access":"public","tags":[],"returns":{"type":"Promise","description":"a promise resolving with the record array","properties":[]},"params":[{"name":"type","type":"string","description":"type of model to load"},{"name":"options","type":"object","description":"(optional) a hash of options"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"loadRecord","file":"ember-data-storefront/mixins/loadable-store","description":"<div class=\"docs-md\"><p><code>loadRecord</code> can be used in place of <code>store.findRecord</code> to fetch a single record for the given type, id and options.</p>\n<pre class=\"docs-md__code\"><code class=\"undefineddiff\">  this.get('store')\n<span class=\"hljs-deletion\">-   .findRecord('post', 1, { include: 'comments' })</span>\n<span class=\"hljs-addition\">+   .loadRecord('post', 1, { include: 'comments' })</span>\n    .then(post =&gt; post);</code></pre>\n<p><code>loadRecord</code> caches based on the query you provide, so each of the following examples would return a blocking promise the first time they are called, and synchronously resolve from the cache thereafter.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-comment\">// simple fetch</span>\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).loadRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-comment\">// includes</span>\n<span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).loadRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">include</span>: <span class=\"hljs-string\">'comments'</span> });</code></pre>\n<p>This solves many common bugs where <code>findRecord</code> would return immediately, even if important <code>includes</code> had never been loaded.</p>\n<p>Similar to <code>store.findRecord</code>, you can force a query to reload using <code>reload: true</code>:</p>\n<pre class=\"docs-md__code\"><code>// force an already loaded set to reload (blocking promise)\nstore.loadRecord(&#39;post&#39;, 1, { reload: true });</code></pre><p>In most cases, <code>loadRecord</code> should be a drop-in replacement for <code>findRecord</code> that eliminates bugs and improves your app&#39;s caching.</p></div>","lineNumber":83,"access":"public","tags":[],"returns":{"type":"Promise","description":"a promise resolving with the record array","properties":[]},"params":[{"name":"type","type":"string","description":"type of model to load"},{"name":"id","type":"number","description":"id of model to load"},{"name":"options","type":"object","description":"(optional) a hash of options"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"hasLoadedIncludesForRecord","file":"ember-data-storefront/mixins/loadable-store","description":"<div class=\"docs-md\"><p><em>This method relies on JSON:API, and assumes that your server supports JSON:API includes.</em></p>\n<p>Lets you check whether you&#39;ve ever loaded related data for a model.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjs\"><span class=\"hljs-keyword\">this</span>.get(<span class=\"hljs-string\">'store'</span>).hasLoadedIncludesForRecord(<span class=\"hljs-string\">'post'</span>, <span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'comments.author'</span>);</code></pre></div>","lineNumber":137,"access":"public","tags":[],"returns":{"type":"boolean","description":"whether the includesString has been loaded","properties":[]},"params":[{"name":"type","type":"string","description":"type of model to check"},{"name":"id","type":"number","description":"id of model to check"},{"name":"includesString","type":"string","description":"a JSON:API includes string representing the relationships to check"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"resetCache","file":"ember-data-storefront/mixins/loadable-store","lineNumber":157,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-storefront/mixins/loadable-store","attributes":{"file":"ember-data-storefront/mixins/loadable-store","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-storefront/mixins/loadable-store~LoadableStore"}]},"components":{"data":[]}}}]}
